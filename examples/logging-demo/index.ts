import { TelegramClient, type Update } from "@bot-machine/telegram-client";
import { z } from "zod";
import { Router } from "../../src/router";
import { createLogger } from "../../src/logger";
import { loggingMiddleware } from "../../src/middleware/logging.middleware";
import { createCommand } from "../../src/core";

// 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
const startCommand = createCommand({
	name: "demo.start",
	input: z.object({}),
	output: z.object({}),
	execute: async (_, ctx) => {
		    await ctx.reply(
		      `Hello, ${ctx.from?.first_name} üëã\nYour request has been logged with Update ID: ${ctx.update.update_id}`,
		    );		return {};
	},
});

async function main() {
	// 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	const token = process.env.BOT_TOKEN;
	if (!token) {
		console.error("Error: BOT_TOKEN environment variable is not set.");
		process.exit(1);
	}

	// 3. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–µ—Ä–∞
	const logger = createLogger();

	logger.info("Starting bot...");

	// 4. –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–µ–≥–æ –ª–æ–≥–µ—Ä
	const router = new Router({ logger });

	// 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	router.use(loggingMiddleware());

	// 6. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
	router.onCommand("start", async (ctx) => {
		// –í–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –ª–æ–≥–∏—Ä—É–µ–º—É—é –∫–æ–º–∞–Ω–¥—É
		await startCommand.execute({}, ctx);
	});

	// 7. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
	const client = new TelegramClient(token);

	// 8. –ó–∞–ø—É—Å–∫–∞–µ–º long-polling
	logger.info("Bot is polling for updates...");
	await client.startPolling((update: Update) => {
		// –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–æ—É—Ç–µ—Ä
		router.handle(update, client).catch((err) => {
			logger.error(err, "Error in router.handle");
		});
	});
}

main().catch((err) => {
	// –§–æ–ª–ª–±—ç–∫-–ª–æ–≥–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è
	const fallbackLogger = createLogger();
	fallbackLogger.fatal(err, "A fatal error occurred in the main function.");
	process.exit(1);
});
